window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "IGA_for_bsplyne", "modulename": "IGA_for_bsplyne", "kind": "module", "doc": "<h1 id=\"iga_for_bsplyne\">IGA_for_bsplyne</h1>\n\n<p><strong>IGA_for_bsplyne</strong> is a Python library for 3D isogeometric analysis (IGA) applied to elasticity problems. This library builds upon the previous work from the <a href=\"https://github.com/Dorian210/bsplyne\">bsplyne</a> library and extends its capabilities for complex elasticity simulations.</p>\n\n<blockquote>\n  <p><strong>Note:</strong> This library is not yet available on PyPI. To install, please clone the repository and install it manually.</p>\n</blockquote>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Since <strong>IGA_for_bsplyne</strong> is not yet on PyPI, you can install it locally as follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>git<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/Dorian210/IGA_for_bsplyne\n<span class=\"nb\">cd</span><span class=\"w\"> </span>IGA_for_bsplyne\npip<span class=\"w\"> </span>install<span class=\"w\"> </span>-e<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<p>Make sure to also install the required dependency <a href=\"https://github.com/Dorian210/bsplyne\">bsplyne</a> manually:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>git<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/Dorian210/bsplyne\n<span class=\"nb\">cd</span><span class=\"w\"> </span>bsplyne\npip<span class=\"w\"> </span>install<span class=\"w\"> </span>-e<span class=\"w\"> </span>.\n</code></pre>\n</div>\n\n<p>Additionally, ensure that <a href=\"https://github.com/scikit-sparse/scikit-sparse\">scikit-sparse</a> is installed (recommended installation via conda):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>conda<span class=\"w\"> </span>install<span class=\"w\"> </span>-c<span class=\"w\"> </span>conda-forge<span class=\"w\"> </span>scikit-sparse\n</code></pre>\n</div>\n\n<h2 id=\"main-modules\">Main Modules</h2>\n\n<ul>\n<li><p><strong>Dirichlet</strong><br />\nManages Dirichlet boundary conditions by applying an affine mapping (u = C @ dof + k).<br />\n<em>Key functions</em>: <code>Dirichlet.eye()</code>, <code>Dirichlet.lock_disp_inds()</code>, <code>set_u_inds_vals()</code>, <code>u_du_ddof()</code>, <code>u()</code>, <code>dof_lsq()</code></p></li>\n<li><p><strong>IGAPatch</strong><br />\nConstructs a 3D IGA patch to compute the stiffness matrix, right-hand side vector, and other operators for elasticity problems over a B-spline volume.<br />\n<em>Key functions</em>: <code>jacobian()</code>, <code>grad_N()</code>, <code>make_W()</code>, <code>stiffness()</code>, <code>rhs()</code>, <code>epsilon()</code>, <code>sigma()</code>, <code>sigma_eig()</code>, <code>von_mises()</code>, <code>save_paraview()</code></p></li>\n<li><p><strong>ProblemIGA</strong><br />\nAssembles the global system of equations, applies boundary conditions, and solves the elasticity problem across one or more patches.<br />\n<em>Key functions</em>: <code>assembly_block()</code>, <code>lhs_rhs()</code>, <code>apply_dirichlet()</code>, <code>solve_from_lhs_rhs()</code>, <code>solve()</code>, <code>save_paraview()</code></p></li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>Several example scripts demonstrating the usage of <strong>IGA_for_bsplyne</strong> can be found in the <code>examples/</code> directory. These scripts cover different aspects of the library, including setting up boundary conditions, creating IGA patches, and solving elasticity problems.</p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>The full API documentation is available in the <code>doc/</code> directory of the project or via the <a href=\"https://raw.githack.com/Dorian210/IGA_for_bsplyne/refs/heads/main/doc/IGA_for_bsplyne.html\">online documentation portal</a>.</p>\n\n<h2 id=\"contributing\">Contributing</h2>\n\n<p>Contributions are welcome!  </p>\n\n<ul>\n<li>To report bugs or suggest improvements, please open an issue.</li>\n<li>For direct contributions, feel free to fork the repository and submit pull requests.</li>\n</ul>\n\n<h2 id=\"license\">License</h2>\n\n<p>This project is licensed under the <a href=\"LICENSE.txt\">CeCILL License</a>.</p>\n"}, {"fullname": "IGA_for_bsplyne.Dirichlet", "modulename": "IGA_for_bsplyne.Dirichlet", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet", "kind": "class", "doc": "<p>A class to handle Dirichlet boundary conditions (BC) for a problem using an affine mapping.</p>\n\n<p>The Dirichlet class provides methods to apply Dirichlet BCs by mapping degrees of freedom (dof)\nto displacements (u) using the relation <code>u = C @ dof + k</code>. It supports creating instances with\nidentity mappings, locking specific displacement indices, and computing dof from displacements\nvia least squares approximation.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>C</strong> (sps.csc_matrix):\nThe matrix used in the affine mapping from <code>dof</code> to <code>u</code>.</li>\n<li><strong>k</strong> (npt.NDArray[np.float_]):\nThe vector used in the affine mapping from <code>dof</code> to <code>u</code>.</li>\n</ul>\n"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet.__init__", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet.__init__", "kind": "function", "doc": "<p>Initializes a Dirichlet instance with the given matrix and vector for affine mapping.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>C</strong> (sps.spmatrix of float):\nThe matrix used to map degrees of freedom <code>dof</code> to displacements <code>u</code>.</li>\n<li><strong>k</strong> (npt.NDArray[np.float_]):\nThe vector used to map degrees of freedom <code>dof</code> to displacements <code>u</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">spmatrix</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span>)</span>"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet.C", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet.C", "kind": "variable", "doc": "<p></p>\n", "annotation": ": scipy.sparse._csc.csc_matrix"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet.k", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet.k", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet.eye", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet.eye", "kind": "function", "doc": "<p>Create a <code>Dirichlet</code> instance with an identity mapping, where no degrees of freedom <code>dof</code> are locked.\nSets <code>C</code> to the identity matrix and <code>k</code> to a zero-filled vector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>size</strong> (int):\nSize of the <code>dof</code> and <code>u</code> vectors.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dirichlet</strong> (Dirichlet):\nThe identity <code>Dirichlet</code> instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet.lock_disp_inds", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet.lock_disp_inds", "kind": "function", "doc": "<p>Creates a <code>Dirichlet</code> instance with specified displacement <code>u</code> indices locked to given values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inds</strong> (npt.NDArray[np.int_]):\nIndices of the displacement field <code>u</code> to be locked.</li>\n<li><strong>k</strong> (npt.NDArray[np.float_]):\nValues to lock the specified indices of <code>u</code> to.\nAfter this, <code>u[inds]</code> are set to <code>k[inds]</code> while other compontents are left free.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dirichlet</strong> (Dirichlet):\nA <code>Dirichlet</code> instance with specified displacements locked.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet.set_u_inds_vals", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet.set_u_inds_vals", "kind": "function", "doc": "<p>Locks specified indices of the displacement field <code>u</code> to given values by modifying\nthe matrix <code>C</code> and vector <code>k</code> accordingly. This involves zeroing out the specified\nrows in <code>C</code> and adjusting <code>k</code> to reflect the locked values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inds</strong> (npt.NDArray[np.int_]):\nIndices of the displacement field <code>u</code> to be locked.</li>\n<li><strong>vals</strong> (npt.NDArray[np.float_]):\nValues to lock the specified indices of <code>u</code> to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">vals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet.u_du_ddof", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet.u_du_ddof", "kind": "function", "doc": "<p>Computes the displacement field <code>u</code> and its derivative with respect to the degrees of freedom <code>dof</code>.\nThe displacement field is calculated as <code>u = C @ dof + k</code>, and its derivative is <code>C</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dof</strong> (npt.NDArray[np.float_]):\nThe degrees of freedom of the problem, representing the input to the affine mapping.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>u, du_ddof</strong> (tuple[npt.NDArray[np.float_], sps.csc_matrix]):\nA tuple containing the displacement field <code>u</code> and its derivative with respect to <code>dof</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dof</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]],</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_csc</span><span class=\"o\">.</span><span class=\"n\">csc_matrix</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet.u", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet.u", "kind": "function", "doc": "<p>Computes the displacement field <code>u</code> using the affine mapping <code>u = C @ dof + k</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dof</strong> (npt.NDArray[np.float_]):\nThe degrees of freedom of the problem, representing the input to the affine mapping.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>u</strong> (npt.NDArray[np.float_]):\nThe computed displacement field <code>u</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dof</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.Dirichlet.Dirichlet.dof_lsq", "modulename": "IGA_for_bsplyne.Dirichlet", "qualname": "Dirichlet.dof_lsq", "kind": "function", "doc": "<p>Computes the degrees of freedom <code>dof</code> from the displacement field <code>u</code> using a least squares approximation.\nThis method performs a least squares 'inversion' of the affine mapping <code>u = C @ dof + k</code>.\nIt solves the linear problem <code>C.T @ C @ dof = C.T @ (u - k)</code> for <code>dof</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>u</strong> (npt.NDArray[np.float_]):\nThe displacement field from which to compute the degrees of freedom.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dof</strong> (npt.NDArray[np.float_]):\nThe computed degrees of freedom corresponding to the given displacement field.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">u</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch", "modulename": "IGA_for_bsplyne.IGAPatch", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch", "kind": "class", "doc": "<p>IGAPatch class to compute linear elasticity operators on 3D B-spline volumes.\nThis class computes the stiffness matrix and the right hand side on one B-spline patch.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>spline</strong> (BSpline):\nB-spline volume object used as the patch.\nContains the methods to compte the shape functions.</li>\n<li><strong>ctrl_pts</strong> (npt.NDArray[np.float_]):\nControl points defining the patch geometry.</li>\n<li><strong>E</strong> (float):\nYoung's modulus of the material.</li>\n<li><strong>nu</strong> (float):\nPoisson's ratio of the material.</li>\n<li><strong>xi</strong> (npt.NDArray[np.float_]):\nDiscretization of the isoparametric coordinate xi.</li>\n<li><strong>dxi</strong> (npt.NDArray[np.float_]):\nCorresponding weights of xi.</li>\n<li><strong>eta</strong> (npt.NDArray[np.float_]):\nDiscretization of the isoparametric coordinate eta.</li>\n<li><strong>deta</strong> (npt.NDArray[np.float_]):\nCorresponding weights of eta.</li>\n<li><strong>zeta</strong> (npt.NDArray[np.float_]):\nDiscretization of the isoparametric coordinate zeta.</li>\n<li><strong>dzeta</strong> (npt.NDArray[np.float_]):\nCorresponding weights of zeta.</li>\n<li><strong>F_N</strong> (npt.NDArray[np.float_]):\nSurfacic forces applied on the corresponding side of the patch.</li>\n</ul>\n"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.__init__", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.__init__", "kind": "function", "doc": "<p>Initialize the IGAPatch with the given parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>spline</strong> (BSpline):\nB-spline volume used as the patch.</li>\n<li><strong>ctrl_pts</strong> (npt.NDArray[np.float_]):\nControl points defining the patch geometry.</li>\n<li><strong>E</strong> (float):\nYoung's modulus of the material.</li>\n<li><strong>nu</strong> (float):\nPoisson's ratio of the material.</li>\n<li><strong>F_N</strong> (npt.NDArray[np.float_], optional):\nSurfacic forces applied on the corresponding side of the patch.\nIts shape should be (3(param), 2(side), 3(phy)).\nBy default np.zeros((3, 2, 3), dtype='float').</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">spline</span><span class=\"p\">:</span> <span class=\"n\">bsplyne</span><span class=\"o\">.</span><span class=\"n\">b_spline</span><span class=\"o\">.</span><span class=\"n\">BSpline</span>,</span><span class=\"param\">\t<span class=\"n\">ctrl_pts</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">E</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">nu</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">F_N</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">([[[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">]],</span>\n\n       <span class=\"p\">[[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">]],</span>\n\n       <span class=\"p\">[[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">]]])</span></span>)</span>"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.spline", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.spline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bsplyne.b_spline.BSpline"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.ctrl_pts", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.ctrl_pts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.E", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.E", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.nu", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.nu", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.xi", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.xi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.dxi", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.dxi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.eta", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.eta", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.deta", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.deta", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.zeta", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.zeta", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.dzeta", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.dzeta", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.F_N", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.F_N", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.H", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.H", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.jacobian", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.jacobian", "kind": "function", "doc": "<p>Calculate the Jacobian matrix (derivative of the mesh wrt its isoparametric space), \nits inverse, and its determinant.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dN_dXI</strong> (tuple[sps.spmatrix, sps.spmatrix, sps.spmatrix]):\nTuple of sparse matrices representing the derivatives of shape \nfunctions wrt the isoparametric space.\nContains dN_dxi, dN_deta and dN_dzeta.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>J</strong> (npt.NDArray[np.float_]):\nJacobian matrix, with shape (3(phy), 3(param), nb_intg_pts).</li>\n<li><strong>Jinv</strong> (npt.NDArray[np.float_]):\nInverse of the Jacobian matrix, with shape (3(param), 3(phy), nb_intg_pts).</li>\n<li><strong>detJ</strong> (npt.NDArray[np.float_]):\nDeterminant of the Jacobian matrix, with shape (nb_intg_pts,).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dN_dXI</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.grad_N", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.grad_N", "kind": "function", "doc": "<p>Calculate the gradient of shape functions with respect to physical space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Jinv</strong> (npt.NDArray[np.float_]):\nInverse of the Jacobian matrix, with shape (3(phy), 3(param), nb_intg_pts).</li>\n<li><strong>dN_dXI</strong> (tuple[sps.spmatrix, sps.spmatrix, sps.spmatrix]):\nTuple of sparse matrices representing the derivatives of shape \nfunctions with respect to the isoparametric space.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dN_dX</strong> (npt.NDArray[np.object_]):\nGradient of shape functions with respect to physical space.\nNumpy array of shape (3(phy),) containing <code>sps.spmatrix</code> objects of shape (nb_intg_pts, nb_ctrl_pts).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">Jinv</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">dN_dXI</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">object_</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.make_W", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.make_W", "kind": "function", "doc": "<p>Compute the measure for intagrating in the physical space as ( abs(det(dX_dXI))<em>dxi</em>deta*dzeta ).\nThis is the element-wise product of the absolute value of detJ and the Kronecker product \nof dxi, deta, and dzeta.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>detJ</strong> (npt.NDArray[np.float_]):\nArray containing the determinant values.\nIts shape is (nb_intg_pts,).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>W</strong> (npt.NDArray[np.float_]):\nArray containing the measure for intagrating in the physical space.\nIts shape is (nb_intg_pts,).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">detJ</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.stiffness", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.stiffness", "kind": "function", "doc": "<p>Calculate the stiffness matrix for the IGAPatch.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>K</strong> (sps.spmatrix):\nStiffness matrix computed based on the given parameters and operations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">spmatrix</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.rhs", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.rhs", "kind": "function", "doc": "<p>Calculate the right-hand side (rhs) vector for the IGAPatch.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>rhs</strong> (npt.NDArray[np.float_]):\nThe computed rhs vector based on the given parameters and operations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.epsilon", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.epsilon", "kind": "function", "doc": "<p>Calculate the strain tensor (epsilon) for the IGAPatch based on \nthe displacement field <code>U</code> and the isoparametric coordinates <code>XI</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>U</strong> (npt.NDArray[np.float_]):\nDisplacement field as a numpy array of shape (3(phy), nb_ctrl_pts).</li>\n<li><strong>XI</strong> (list[npt.NDArray[np.float_]]):\nList of isoparametric coordinates for each direction xi, eta, and zeta.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>eps</strong> (npt.NDArray[np.float_]):\nStrain tensor epsilon in voight notation \ncomputed as a numpy array of shape (6, nb_param_pts).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">U</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">XI</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.sigma", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.sigma", "kind": "function", "doc": "<p>Calculate the stress tensor (sigma) for the IGAPatch based on \nthe displacement field <code>U</code> and the isoparametric coordinates <code>XI</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>U</strong> (npt.NDArray[np.float_]):\nDisplacement field as a numpy array of shape (3(phy), nb_ctrl_pts).</li>\n<li><strong>XI</strong> (list[npt.NDArray[np.float_]]):\nList of isoparametric coordinates for each direction xi, eta, and zeta.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sig</strong> (npt.NDArray[np.float_]):\nStress tensor sigma in voight notation \ncomputed as a numpy array of shape (6, nb_param_pts).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">U</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">XI</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.sigma_eig", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.sigma_eig", "kind": "function", "doc": "<p>Calculate the eigenvalues of the stress tensor for the IGAPatch based on \nthe displacement field <code>U</code> and the isoparametric coordinates <code>XI</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>U</strong> (npt.NDArray[np.float_]):\nDisplacement field as a numpy array of shape (3(phy), nb_ctrl_pts).</li>\n<li><strong>XI</strong> (list[npt.NDArray[np.float_]]):\nList of isoparametric coordinates for each direction xi, eta, and zeta.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sig_eig</strong> (npt.NDArray[np.float_]):\nEigenvalues of the stress tensor computed as a numpy array of shape (nb_param_pts, 3).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">U</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">XI</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.von_mises", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.von_mises", "kind": "function", "doc": "<p>Calculate the von Mises stress for the IGAPatch based on the displacement field <code>U</code> \nand the isoparametric coordinates <code>XI</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>U</strong> (npt.NDArray[np.float_]):\nDisplacement field as a numpy array of shape (3(phy), nb_ctrl_pts).</li>\n<li><strong>XI</strong> (list[npt.NDArray[np.float_]]):\nList of isoparametric coordinates for each direction xi, eta, and zeta.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>vm</strong> (npt.NDArray[np.float_]):\nVon Mises stress computed as a numpy array of shape (nb_param_pts,).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">U</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">XI</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.IGAPatch.IGAPatch.save_paraview", "modulename": "IGA_for_bsplyne.IGAPatch", "qualname": "IGAPatch.save_paraview", "kind": "function", "doc": "<p>Save data for visualization in ParaView.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>U</strong> (npt.NDArray[np.float_]):\nDisplacement field as a numpy array of shape (3(phy), nb_ctrl_pts).</li>\n<li><strong>path</strong> (str):\nPath to save the data.</li>\n<li><strong>name</strong> (str):\nName of the saved data.</li>\n<li><strong>n_eval_per_elem</strong> (int, optional):\nNumber of evaluations per element, by default 10.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">U</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">n_eval_per_elem</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.ProblemIGA", "modulename": "IGA_for_bsplyne.ProblemIGA", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA", "kind": "class", "doc": "<p>ProblemIGA class to compute linear elasticity on 3D multipatch B-spline volumes.\nThis class computes the stiffness matrix and the right hand side and solves the linear problem.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>patches</strong> (list[IGAPatch]):\nList of IGAPatch objects representing the patches for the ProblemIGA.</li>\n<li><strong>connectivity</strong> (MultiPatchBSplineConnectivity):\nMultiPatchBSplineConnectivity object defining the connectivity information.</li>\n<li><strong>dirichlet</strong> (Dirichlet):\nDirichlet object specifying the Dirichlet boundary conditions.</li>\n</ul>\n"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.__init__", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.__init__", "kind": "function", "doc": "<p>Initialize the ProblemIGA class with the provided patches, connectivity, and dirichlet.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>patches</strong> (list[IGAPatch]):\nList of IGAPatch objects representing the patches for the ProblemIGA.</li>\n<li><strong>connectivity</strong> (MultiPatchBSplineConnectivity):\nMultiPatchBSplineConnectivity object defining the connectivity information.</li>\n<li><strong>dirichlet</strong> (Dirichlet):\nDirichlet object specifying the Dirichlet boundary conditions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">patches</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">connectivity</span><span class=\"p\">:</span> <span class=\"n\">bsplyne</span><span class=\"o\">.</span><span class=\"n\">multi_patch_b_spline</span><span class=\"o\">.</span><span class=\"n\">MultiPatchBSplineConnectivity</span>,</span><span class=\"param\">\t<span class=\"n\">dirichlet</span><span class=\"p\">:</span> <span class=\"n\">IGA_for_bsplyne</span><span class=\"o\">.</span><span class=\"n\">Dirichlet</span><span class=\"o\">.</span><span class=\"n\">Dirichlet</span></span>)</span>"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.patches", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.patches", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[IGA_for_bsplyne.IGAPatch.IGAPatch]"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.connectivity", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.connectivity", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.dirichlet", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.dirichlet", "kind": "variable", "doc": "<p></p>\n", "annotation": ": IGA_for_bsplyne.Dirichlet.Dirichlet"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.assembly_block", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.assembly_block", "kind": "function", "doc": "<p>Process a block of patches, accumulating contributions to rhs and lhs.\nEach block has its own progress bar.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.lhs_rhs", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.lhs_rhs", "kind": "function", "doc": "<p>Assemble the global left-hand side (lhs) matrix and right-hand side (rhs) vector\nfor the linear system of equations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>verbose</strong> (bool, optional):\nIf True, prints progress messages during the assembly process, by default False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>lhs, rhs</strong> (tuple[sps.spmatrix, npt.NDArray[np.float_]]):\nThe assembled sparse left-hand side matrix and right-hand side vector.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">spmatrix</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.apply_dirichlet", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.apply_dirichlet", "kind": "function", "doc": "<p>Apply Dirichlet boundary conditions to the system of equations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lhs</strong> (sps.spmatrix):\nThe left-hand side sparse matrix of the system.</li>\n<li><strong>rhs</strong> (npt.NDArray[np.float_]):\nThe right-hand side vector of the system.</li>\n<li><strong>verbose</strong> (bool, optional):\nIf True, prints progress messages, by default False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>lhs, rhs</strong> (tuple[sps.spmatrix, npt.NDArray[np.float_]]):\nThe modified left-hand side matrix and right-hand side vector\nafter applying Dirichlet boundary conditions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">spmatrix</span>,</span><span class=\"param\">\t<span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">spmatrix</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.solve_from_lhs_rhs", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.solve_from_lhs_rhs", "kind": "function", "doc": "<p>Solve the linear system defined by the left-hand side (lhs) matrix and right-hand side (rhs) vector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lhs</strong> (sps.spmatrix):\nThe left-hand side sparse matrix of the system.</li>\n<li><strong>rhs</strong> (npt.NDArray[np.float_]):\nThe right-hand side vector of the system.</li>\n<li><strong>iterative_solve</strong> (bool, optional):\nIf True, use an iterative solver (conjugate gradient with diagonal preconditioner),\notherwise use a direct solver (Cholesky factorization).\nSpecs for 1_534_278 dof : \n    - CG preconditioned with diagonal (<code>scipy.sparse.diags(1/lhs.diagonal())</code>): \n        solved to 1e-5 tol in 131 min\n    - CG preconditioned with AMG (<code>pyamg.smoothed_aggregation_solver(lhs).aspreconditioner()</code>): \n        solved to 1e-5 tol in 225 min\n    - Cholesky: solved in 32 min\nBy default False.</li>\n<li><strong>verbose</strong> (bool, optional):\nIf True, print progress messages during the solving process, by default True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dof</strong> (npt.NDArray[np.float_]):\nThe solution vector representing the degrees of freedom.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lhs</span><span class=\"p\">:</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">spmatrix</span>,</span><span class=\"param\">\t<span class=\"n\">rhs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">iterative_solve</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.solve", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.solve", "kind": "function", "doc": "<p>Solve the linear system for the ProblemIGA class using ProcessPoolExecutor with block splitting.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iterative_solve</strong> (bool, optional):\nWhether to use an iterative solver or not, default is False.\nThe iterative solver is a sparse conjugate gradient with a diagonal preconditioner.\nThe direct solver is a Cholesky sparse solver.\nSpecs for 1_534_278 dof : \n    - CG preconditioned with diagonal (<code>scipy.sparse.diags(1/lhs.diagonal())</code>): \n        solved to 1e-5 tol in 131 min\n    - CG preconditioned with AMG (<code>pyamg.smoothed_aggregation_solver(lhs).aspreconditioner()</code>): \n        solved to 1e-5 tol in 225 min\n    - Cholesky: solved in 32 min</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>u</strong> (npt.NDArray[np.float_]):\nSolution vector representing the computed displacements in packed notation.\nShape : (3(phy), nb_unique_nodes)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">iterative_solve</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "IGA_for_bsplyne.ProblemIGA.ProblemIGA.save_paraview", "modulename": "IGA_for_bsplyne.ProblemIGA", "qualname": "ProblemIGA.save_paraview", "kind": "function", "doc": "<p>Save the computed displacements and related fields to Paraview format for visualization.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>u</strong> (npt.NDArray[np.float_]):\nDisplacement field in packed notation as a numpy array of shape (3(phy), nb_unique_nodes).</li>\n<li><strong>path</strong> (str):\nPath to save the Paraview files.</li>\n<li><strong>name</strong> (str):\nName of the Paraview files.</li>\n<li><strong>n_eval_per_elem</strong> (int, optional):\nNumber of evaluations per element, default is 10.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">u</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">n_eval_per_elem</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();